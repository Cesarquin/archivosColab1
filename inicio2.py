# -*- coding: utf-8 -*-
"""Inicio2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12gcjLaupFC_TAvzoahlID0HV29SFCB3-

# Titulo

Definicion de funciones: printf(), fprintf(), print()

def info():             # creando la función \
    print("Cesar")

info()   # llamando la función
"""

def info(nomb):
  print(f"{nomb} es genial!!!")

nom="José"
info(nom)

""" Función con dos parámetros:"""

def info(nomb,cargo):
  print(f"Soy {nomb} y trabajo como {cargo}")

info("cesar","Docente")

def info(nomb):
  return nomb
N="Julián"
M=info(N)

"""Función que retorna un valor:"""

def inver(a):
  #Algoritmo Horner
  c=0
  b=a%10
  while b!=0:
      b=a%10  # residuo  12345/10  -> res: b=5
      a=int(a/10) # a=1234
      c=c*10+b
  return c
# sale de la función
a=int(input("ingrese valor: "))
D=inver(a)
print(D)

"""**Diferencia entre funciones y modulos:**

 *funcion(argumento)* # Manera de utilizar una función.

 *argumento.metodo()* # Forma de llamar un método. 

"""

nomb="Cesar"
print(nomb.upper())

"""##### Trabajo en objetos. (Diccionario en Python)

###### Estructuras de datos:

- Lista: ["Cesar","Augusto",] [1,2,3] 
- Tupla: ()
- Diccionario:{}

Crear Lista:
"""

A=[1,2,3,4]
pierden_la_materia=["Alison","Daniel","Cristian","Gabriela"]
print(A[0],A[3])
print(f"El estudiante que se queda este semestre es: {pierden_la_materia[2]}")
print("Los estudiantes mas juicicosos son:")
for x in pierden_la_materia:
  print(x)

# Crear lista con un ciclo:

for x in range(0,20,5):
  print(x)

"""Crear una tupla:"""

A=(10,20,30)
type(A)

"""Crear diccionario:"""

canciones={"artista":["Alex Campos",12],"tema":"Abc","año":2019}
print(canciones["artista"])

for llave,valor in canciones.items():
  print(llave)
  print(valor)

